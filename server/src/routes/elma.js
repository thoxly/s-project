const express = require('express');
const axios = require('axios');
const router = express.Router();
const mongoose = require('mongoose');

// ELMA365 API configuration
const ELMA_API_URL = process.env.ELMA_API_URL;
const ELMA_TOKEN = process.env.ELMA_TOKEN;

// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
let SupportRequest;
try {
  SupportRequest = require('../models/SupportRequest');
} catch (error) {
  console.warn('‚ö†Ô∏è  SupportRequest model not available');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const isMongoConnected = () => {
  const readyState = mongoose.connection.readyState;
  const hasModel = !!SupportRequest;
  return readyState === 1 && hasModel;
};

// CORS middleware –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –õ–ò–ë–ï–†–ê–õ–¨–ù–ê–Ø –ü–û–õ–ò–¢–ò–ö–ê
router.use((req, res, next) => {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, X-Forwarded-For');
  res.header('Access-Control-Expose-Headers', 'Content-Type, Authorization');
  res.header('Access-Control-Max-Age', '86400');
  res.header('Access-Control-Allow-Credentials', 'false');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É
  if (req.method === 'OPTIONS') {
    console.log('üîç OPTIONS –∑–∞–ø—Ä–æ—Å –≤ —Ä–æ—É—Ç–µ—Ä–µ elma:', req.path);
    res.status(204).end();
    return;
  }
  next();
});
router.post('/get_application', async (req, res) => {
  // –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 OK, —á—Ç–æ–±—ã ELMA –Ω–µ –ø–æ–ª—É—á–∞–ª 502
  try {
    // req.body ‚Äî —ç—Ç–æ defaultRequestContext, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à—ë–ª –æ—Ç ELMA
    const applicationData = req.body;
    
    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üì• Webhook –æ—Ç ELMA –ø–æ–ª—É—á–µ–Ω:', new Date().toISOString());
    console.log('üì• URL:', req.originalUrl);
    console.log('üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏:', JSON.stringify(req.headers, null, 2));
    console.log('üì• –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(applicationData, null, 2));
    console.log('üìä MongoDB —Å—Ç–∞—Ç—É—Å:', mongoose.connection.readyState === 1 ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º id_portal –∏ —Å—Ç–∞—Ç—É—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    // ELMA –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: { id, status, description, type, date, initiator, assignee }
    let idPortal = null;
    let newStatus = null;

    // –í–∞—Ä–∏–∞–Ω—Ç 1: ELMA –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø—Ä—è–º—É—é { id: "...", status: "..." }
    if (applicationData.id_portal || applicationData.id) {
      idPortal = applicationData.id_portal || applicationData.id;
    }
    
    // –í–∞—Ä–∏–∞–Ω—Ç 2: –¥–∞–Ω–Ω—ã–µ –≤ context (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)
    if (applicationData.context && applicationData.context.id_portal) {
      idPortal = applicationData.context.id_portal;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å (ELMA –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ø–æ–ª–µ "status")
    if (applicationData.status) {
      newStatus = applicationData.status;
    } else if (applicationData.currentStatus) {
      newStatus = applicationData.currentStatus;
    } else if (applicationData.context && applicationData.context.status) {
      newStatus = applicationData.context.status;
    }

    console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { 
      idPortal, 
      newStatus,
      receivedFields: Object.keys(applicationData)
    });

    if (!idPortal) {
      console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å id_portal –∏–∑ –¥–∞–Ω–Ω—ã—Ö ELMA');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, –Ω–æ —Å —Ñ–ª–∞–≥–æ–º warning
      return res.status(200).json({ 
        success: true,
        warning: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å id_portal, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        receivedData: applicationData
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ MongoDB
    if (isMongoConnected()) {
      try {
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
        const existingRequest = await SupportRequest.findOne({ 
          'context.id_portal': idPortal 
        });

        if (existingRequest) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
          const updateData = {
            updatedAt: new Date()
          };

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω (ELMA –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –ø–æ–ª–µ "status")
          if (newStatus) {
            updateData.currentStatus = newStatus;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º context —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç ELMA
          // ELMA –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: { id, status, description, type, date, initiator, assignee }
          if (applicationData.context) {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ context
            updateData.context = { ...existingRequest.context, ...applicationData.context };
            updateData.context.id_portal = idPortal;
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º solution_description: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏ context
            if (applicationData.solution_description !== null && applicationData.solution_description !== undefined) {
              // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–µ—Ä—Ö–Ω–µ–º—É —É—Ä–æ–≤–Ω—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
              updateData.context.solution_description = applicationData.solution_description;
            } else if (applicationData.context.solution_description !== null && applicationData.context.solution_description !== undefined) {
              // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –±–µ—Ä–µ–º –∏–∑ context
              updateData.context.solution_description = applicationData.context.solution_description;
            }
          } else {
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç ELMA, –º–∞–ø–ø–∏–º –∏—Ö –≤ context
            updateData.context = {
              ...existingRequest.context,
              id_portal: idPortal,
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç ELMA –≤ context
              application_text: applicationData.description || existingRequest.context?.application_text,
              // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
              ...(applicationData.type && { service: [applicationData.type] }),
              ...(applicationData.assignee && { responsible: [applicationData.assignee] }),
              ...(applicationData.initiator && { aplicant: [applicationData.initiator] }),
            };
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º solution_description: –µ—Å–ª–∏ –Ω–µ null, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            if (applicationData.solution_description !== null && applicationData.solution_description !== undefined) {
              updateData.context.solution_description = applicationData.solution_description;
            }
          }

          const updatedRequest = await SupportRequest.findOneAndUpdate(
            { 'context.id_portal': idPortal },
            updateData,
            { new: true, runValidators: false } // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç ELMA
          );

          console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ MongoDB:', {
            id_portal: idPortal,
            status: updatedRequest.currentStatus
          });

          return res.status(200).json({ 
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            data: updatedRequest
          });
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          // ELMA –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: { id, status, description, type, date, initiator, assignee }
          const contextData = applicationData.context || {
            id_portal: idPortal,
            application_text: applicationData.description || applicationData.application_text || '-',
            ...(applicationData.type && { service: [applicationData.type] }),
            ...(applicationData.assignee && { responsible: [applicationData.assignee] }),
            ...(applicationData.initiator && { aplicant: [applicationData.initiator] }),
          };
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º solution_description: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏ context
          if (applicationData.solution_description !== null && applicationData.solution_description !== undefined) {
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–µ—Ä—Ö–Ω–µ–º—É —É—Ä–æ–≤–Ω—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            contextData.solution_description = applicationData.solution_description;
          } else if (applicationData.context?.solution_description !== null && applicationData.context?.solution_description !== undefined) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –±–µ—Ä–µ–º –∏–∑ context
            contextData.solution_description = applicationData.context.solution_description;
          }
          
          const newRequest = new SupportRequest({
            context: contextData,
            currentStatus: newStatus || '–ù–æ–≤–∞—è',
            sentAt: new Date()
          });

          const savedRequest = await newRequest.save();
          console.log('‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ MongoDB:', {
            id_portal: idPortal,
            status: savedRequest.currentStatus
          });

          return res.status(200).json({ 
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            data: savedRequest
          });
        }
      } catch (dbError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å MongoDB:', dbError);
        console.error('‚ùå Stack trace:', dbError.stack);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —á—Ç–æ–±—ã ELMA –Ω–µ –ø–æ–ª—É—á–∞–ª 502
        return res.status(200).json({ 
          success: true,
          warning: 'Webhook –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î',
          error: dbError.message,
          receivedData: applicationData
        });
      }
    } else {
      console.warn('‚ö†Ô∏è  MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      console.warn('‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –æ—Ç ELMA –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –Ω–æ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —á—Ç–æ–±—ã ELMA –Ω–µ –ø–æ–ª—É—á–∞–ª 502
      return res.status(200).json({ 
        success: true,
        warning: 'MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        receivedData: applicationData
      });
    }
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook –æ—Ç ELMA:', error);
    console.error('‚ùå Stack trace:', error.stack);
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, —á—Ç–æ–±—ã ELMA –Ω–µ –ø–æ–ª—É—á–∞–ª 502
    return res.status(200).json({ 
      success: true,
      warning: 'Webhook –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      error: error.message 
    });
  }
});
// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (legacy, –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
// –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ MongoDB —á–µ—Ä–µ–∑ /get_application
router.post('/check_status', async (req, res) => {
  try {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, X-Forwarded-For');
    
    console.log('‚ÑπÔ∏è  /check_status –≤—ã–∑–≤–∞–Ω (legacy endpoint, —Å—Ç–∞—Ç—É—Å—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ MongoDB)');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ç–∞–∫ –∫–∞–∫ –±—É—Ñ–µ—Ä –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    res.json([]);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ /check_status: ', error);
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin, X-Forwarded-For');
    res.status(500).json({ error: error.message });
  }
});
router.post('/post_application', async (req, res) => {
  try {
    // req.body ‚Äî —ç—Ç–æ defaultRequestContext, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à—ë–ª —Å —Ñ—Ä–æ–Ω—Ç–∞
    const applicationData = req.body;
    console.log(applicationData)
    const response = await fetch('https://og4d3xrizqpay.elma365.ru/pub/v1/app/service_desk/applications/create', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer 94803282-2c5f-44f1-a57f-d59552040232`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(applicationData), // ‚Üê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–æ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å —Ñ—Ä–æ–Ω—Ç–∞
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç ELMA: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    res.json(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ ELMA:', error);
    res.status(500).json({ error: error.message });
  }
});
router.post('/get_data', async (req, res) => {
  try {
    const response = await fetch('https://og4d3xrizqpay.elma365.ru/api/extensions/583d4eea-7f06-47fd-b078-a0caf4f83095/script/post_articles', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer 94803282-2c5f-44f1-a57f-d59552040232`,
        'Content-Type': 'application/json'
      },
    });

    const data = await response.json();
    res.json(data);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
// Create support request in ELMA365
router.post('/support', async (req, res) => {
  try {
    const { title, description, priority, userId } = req.body;
    
    // Mock response for development
    if (!ELMA_API_URL || !ELMA_TOKEN) {
      return res.json({
        success: true,
        processInstanceId: `mock-${Date.now()}`,
        message: 'Mock ELMA integration - request created successfully'
      });
    }
    
    // Real ELMA365 integration
    const elmaPayload = {
      title,
      description,
      priority: priority || 'normal',
      userId,
      timestamp: new Date().toISOString()
    };
    
    const response = await axios.post(`${ELMA_API_URL}/processes/support/start`, elmaPayload, {
      headers: {
        'Authorization': `Bearer ${ELMA_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    res.json({
      success: true,
      processInstanceId: response.data.processInstanceId,
      message: 'Request created in ELMA365'
    });
    
  } catch (error) {
    console.error('ELMA integration error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to create request in ELMA365',
      details: error.message
    });
  }
});

// Get process status from ELMA365
router.get('/status/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    // Mock response for development
    if (!ELMA_API_URL || !ELMA_TOKEN) {
      return res.json({
        processInstanceId: id,
        status: 'in_progress',
        message: 'Mock ELMA integration - status retrieved'
      });
    }
    
    // Real ELMA365 integration
    const response = await axios.get(`${ELMA_API_URL}/processes/${id}/status`, {
      headers: {
        'Authorization': `Bearer ${ELMA_TOKEN}`
      }
    });
    
    res.json(response.data);
    
  } catch (error) {
    console.error('ELMA status check error:', error);
    res.status(500).json({
      error: 'Failed to get process status',
      details: error.message
    });
  }
});

module.exports = router;
